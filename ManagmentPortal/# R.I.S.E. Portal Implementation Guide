# R.I.S.E. Portal Implementation Guide

## Overview

This document provides guidance for implementing the R.I.S.E. client and organizer portal system based on the provided codebase. The recommended solution is a dual-portal system with separate authentication mechanisms for clients and organizers, using Firebase for authentication, database, and storage.

## Key Components

1. **Authentication System**
   - Uses Firebase Authentication with custom claims for role-based access
   - Separate login paths for clients vs. organizers
   - Protected routes based on user roles

2. **Client Portal**
   - Dashboard with overview of resources, events, and messages
   - Resource library for accessing PDFs, videos, and other materials
   - Calendly integration for booking sessions
   - Messaging system to communicate with organizers
   - Profile management

3. **Organizer Portal**
   - Dashboard with analytics and client overview
   - Client management section
   - Resource upload and management
   - Event scheduling and management
   - Message center
   - Settings and configuration

## Implementation Steps

### 1. Setup Firebase

```bash
# Install Firebase dependencies
npm install firebase react-firebase-hooks
```

Create a Firebase configuration file:

```typescript
// src/lib/firebase.ts
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';
import { getStorage } from 'firebase/storage';

const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID
};

// Initialize Firebase
export const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
export const db = getFirestore(app);
export const storage = getStorage(app);
```

### 2. Environment Setup

Create a `.env` file in your project root (add to .gitignore):

```
VITE_FIREBASE_API_KEY=your_api_key
VITE_FIREBASE_AUTH_DOMAIN=your_auth_domain
VITE_FIREBASE_PROJECT_ID=your_project_id
VITE_FIREBASE_STORAGE_BUCKET=your_storage_bucket
VITE_FIREBASE_MESSAGING_SENDER_ID=your_messaging_sender_id
VITE_FIREBASE_APP_ID=your_app_id
```

### 3. Implement Authentication Context

Use the provided `auth.tsx` file as a starting point for your authentication context.

### 4. Set Up Firebase Security Rules

Create Firebase security rules for Firestore:

```
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Base user document access
    match /users/{userId} {
      allow read: if request.auth.uid == userId;
      allow write: if request.auth.uid == userId && 
                     request.resource.data.role == resource.data.role;
      
      // Only organizers can create users
      allow create: if request.auth != null && 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "organizer";
    }
    
    // Resource access
    match /resources/{resourceId} {
      allow read: if request.auth != null && 
                    (resource.data.visibleTo == "all" || 
                     resource.data.visibleTo[request.auth.uid] == true ||
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "organizer");
      
      // Only organizers can create/update/delete resources
      allow write: if request.auth != null && 
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "organizer";
    }
    
    // Messages
    match /messages/{messageId} {
      allow read: if request.auth != null && 
                    (resource.data.senderId == request.auth.uid || 
                     resource.data.receiverId == request.auth.uid);
      
      allow create: if request.auth != null && 
                      request.resource.data.senderId == request.auth.uid;
      
      // Only the original sender can update their own messages
      allow update: if request.auth != null && 
                      resource.data.senderId == request.auth.uid;
    }
    
    // Events
    match /events/{eventId} {
      allow read: if request.auth != null;
      
      // Only organizers can create/update/delete events
      allow write: if request.auth != null && 
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "organizer";
    }
  }
}
```

### 5. UI Integration

1. **Add login buttons to your existing site**:

   - Add a user icon to the top right of your navigation bar for client login
   - Add a "Rise Team Login" link in the footer for organizer login

2. **Modify CSS**:
   
   Ensure the portal UI matches your existing site's design. The code provided already uses your color scheme with variables like:
   
   ```css
   --rise-dark-green
   --rise-medium-green
   --rise-gold
   ```

### 6. Calendly Integration

For the booking interface, implement the Calendly component:

```typescript
// src/components/CalendlyEmbed.tsx
import React, { useEffect } from 'react';
import { useAuth } from '@/lib/auth';

interface CalendlyEmbedProps {
  url: string;
  height?: number;
}

const CalendlyEmbed: React.FC<CalendlyEmbedProps> = ({ 
  url, 
  height = 700 
}) => {
  const { user } = useAuth();
  
  useEffect(() => {
    const script = document.createElement('script');
    script.src = "https://assets.calendly.com/assets/external/widget.js";
    script.async = true;
    document.body.appendChild(script);
    
    return () => {
      document.body.removeChild(script);
    };
  }, []);
  
  // Add user data as prefill information
  const prefillUrl = user ? 
    `${url}?name=${encodeURIComponent(user.displayName || '')}&email=${encodeURIComponent(user.email || '')}` : 
    url;
  
  return (
    <div 
      className="calendly-inline-widget" 
      data-url={prefillUrl}
      style={{ minWidth: '320px', height: `${height}px` }}
    />
  );
};

export default CalendlyEmbed;
```

### 7. Firebase Cloud Functions (Optional)

For certain functionality, you may want to set up Firebase Cloud Functions:

- Email notifications for new messages or resources
- PDF processing or thumbnail generation
- User management and role assignment

### 8. Navigation Integration

Add code to your existing `Navigation.tsx` file to display the login button:

```tsx
// Add this to your existing Navigation component
const Navigation = () => {
  // existing code...
  
  return (
    <header>
      {/* Existing navigation code */}
      
      {/* Add this login button */}
      <div className="ml-auto">
        <Link 
          to="/login" 
          className="inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none h-9 px-4 py-2 bg-rise-gold text-rise-dark-green hover:bg-rise-gold/90"
        >
          <User className="mr-2 h-4 w-4" />
          Login
        </Link>
      </div>
    </header>
  );
};
```

Add the organizer login link to your `Footer.tsx` component:

```tsx
// Add this to your Footer component links
<Link 
  to="/login?type=organizer" 
  className="text-rise-gold hover:underline"
>
  Rise Team Login
</Link>
```

## Firebase Setup Guide

1. **Create a Firebase Project**:
   - Go to [Firebase Console](https://console.firebase.google.com/)
   - Click "Add project" and follow the setup steps

2. **Enable Authentication**:
   - In the Firebase project, go to Authentication â†’ Sign-in method
   - Enable Email/Password authentication

3. **Set up Firestore Database**:
   - Go to Firestore Database
   - Create database (start in test mode, then apply security rules)
   - Set up the initial collections as described in the architecture document

4. **Set up Storage**:
   - Go to Storage
   - Initialize storage (start in test mode, then apply security rules)
   - Create folders for different resource types (pdf, video, etc.)

5. **Deploy Security Rules**:
   - Add the security rules shown in this guide
   - Deploy the rules using Firebase console or CLI

## Development Tips

1. **Local Development**:
   - Use Firebase emulators for local development
   - Install Firebase CLI: `npm install -g firebase-tools`
   - Start emulators: `firebase emulators:start`

2. **Testing with Different User Roles**:
   - Create test accounts with different roles
   - Use Firebase Authentication emulator to switch between accounts

3. **Responsive Design**:
   - The provided components are already responsive
   - Test on different screen sizes to ensure good UX

4. **Deployment**:
   - Deploy to Firebase Hosting for easy integration with other Firebase services
   - Set up continuous deployment with GitHub actions

## Next Steps

1. **Implement Search Functionality**:
   - Add full-text search for resources using Algolia or similar
   
2. **Analytics Integration**:
   - Add Firebase Analytics to track user engagement
   
3. **PDF Viewer**:
   - Implement a PDF viewer for resource viewing directly in the app
   
4. **Video Streaming**:
   - Add video streaming capabilities for video resources

5. **Offline Support**:
   - Implement offline capabilities with service workers
   - Enable resource caching for offline access

## Support and Maintenance

1. **Error Monitoring**:
   - Implement Firebase Crashlytics for error reporting
   
2. **User Feedback System**:
   - Add a feedback mechanism for users to report issues

3. **Backup Strategy**:
   - Set up regular Firestore backups
   - Implement a database export functionality

## Conclusion

This implementation guide provides a comprehensive approach to building the R.I.S.E. portal system based on the provided codebase. The solution leverages Firebase for authentication, database, and storage, with a clean separation between client and organizer interfaces.

The architecture is designed to be scalable and secure, with role-based access control and a responsive user interface that matches your existing brand identity.